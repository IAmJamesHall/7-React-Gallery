{"version":3,"sources":["config.js","components/Search.js","components/Nav.js","components/Photo.js","components/PhotoGrid.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","Search","handleSubmit","e","preventDefault","path","input","value","props","history","push","className","onSubmit","this","type","name","placeholder","required","ref","fill","height","viewBox","width","xmlns","d","Component","withRouter","Nav","to","Photo","url","src","PhotoGrid","photos","photoElements","i","length","key","Results","useEffect","urlQuery","match","params","query","getQuery","then","res","console","log","a","setQuery","getImages","document","title","images","App","loading","state","axios","get","response","parseString","data","err","parsed","rsp","photo","imageURLs","$","farm","id","server","secret","setState","catch","error","setSearchText","render","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4dd201a9.chunk.js","sourcesContent":["const apiKey = \"c977b8e36be13ab709f696ec9c3b9b29\";\n\nexport default apiKey;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass Search extends Component {\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const path = `/search/${this.input.value}`;\n    this.props.history.push(path);\n  }\n\n  render() {\n    return (\n      <form className=\"search-form\" onSubmit={this.handleSubmit}>\n        <input type=\"search\" name=\"search\" placeholder=\"Search\" required ref={(input) => this.input = input} />\n        <button type=\"submit\" className=\"search-button\">\n          <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" />\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n          </svg>\n        </button>\n      </form>\n    )\n  }\n}\n\nexport default withRouter(Search);","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Nav() {\n  return (\n    <nav className=\"main-nav\">\n      <ul>\n        <li><Link to='/search/cats'>Cats</Link></li>\n        <li><Link to='/search/dogs'>Dogs</Link></li>\n        <li><Link to='/search/computers'>Computers</Link></li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Nav;","import React from 'react';\n\nfunction Photo({ url }) {\n  return (\n    <li>\n      <img src={`${url}`}></img>\n    </li>\n  );\n}\n\nexport default Photo;","import React from 'react';\n\nimport Photo from './Photo';\n\nfunction PhotoGrid({photos}) {\n    let photoElements = [];\n    for (let i = 0; i < photos.length; i++) {\n        photoElements.push(<Photo url={photos[i]} key={i} />);\n    }\n\n    return (\n        \n            <ul>\n                {photoElements}\n            </ul>\n        \n    )\n}\n\nexport default PhotoGrid;","import React, { useState, useEffect } from 'react';\nimport PhotoGrid from './PhotoGrid';\n\nimport NoPhoto from './NoPhoto';\n\nconst Results = props => {\n\n  // const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const urlQuery = props.match.params.query;\n    if (urlQuery != props.query) {\n      getQuery(urlQuery).then(res => console.log('yoyo: ', res));\n    }\n  });\n\n  const getQuery = async (query) => {\n    // setIsLoading(true);\n    await props.setQuery(query)\n    await props.getImages();\n    document.title = `${query} | React Gallery App`\n    // setIsLoading(false);\n  }\n\n\n  return (\n    <div className=\"photo-container\">\n      <h2>Results: {props.query} </h2>\n      <PhotoGrid photos={props.images} />\n    </div>\n  )\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { parseString } from 'xml2js';\nimport {\n  BrowserRouter,\n  Route,\n  Switch\n} from 'react-router-dom';\n\nimport './App.css';\n\nimport apiKey from './config';\n\n// Components\nimport Search from './components/Search';\nimport Nav from './components/Nav';\nimport Results from './components/Results';\n\n\nclass App extends Component {\n  loading = ['../loading.gif', '../loading.gif', '../loading.gif', '../loading.gif'];\n  state = {\n    images: this.loading,\n    query: \"tree\"\n  };\n\n  getImages = () => {\n    const url = 'https://www.flickr.com/services/rest/';\n    axios.get(`${url}` +\n      `?method=flickr.photos.search` +\n      `&api_key=${apiKey}` +\n      `&text=${this.state.query}` +\n      `&per_page=24`)\n      .then(response => {\n        let images;\n        parseString(response.data, (err, parsed) => {\n          images = parsed.rsp.photos[0].photo;\n        })\n        return images;\n      })\n      .then(photos => {\n        const imageURLs = [];\n        for (let i = 0; i < photos.length; i++) {\n          const {\n            farm,\n            id,\n            server,\n            secret\n          } = photos[i].$;\n\n          const url = `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n          imageURLs.push(url);\n        }\n        return imageURLs;\n      })\n      .then(imageURLs => {\n        this.setState({\n          images: imageURLs\n        })\n      })\n      .catch(error => {\n        console.log('ERROR: ', error);\n      })\n  }\n\n  setQuery = (query) => {\n    this.setState({query});\n  }\n  \n\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container\">\n          <Search handleSubmit={this.setSearchText} />\n          <Nav />\n          <Route path=\"/search/:query\"\n            render={props => (\n            <Results \n              match={props.match}\n              images={this.state.images}\n              query={this.state.query}\n              getImages={this.getImages}\n              setQuery={this.setQuery}\n            />)}\n          />\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}